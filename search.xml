<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Balanced string split</title>
      <link href="/2021/09/07/Balanced-string-split/"/>
      <url>/2021/09/07/Balanced-string-split/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-Desribtion"><a href="#Problem-Desribtion" class="headerlink" title="Problem Desribtion"></a>Problem Desribtion<br></h1><p><em><strong>Balanced strings are those that have an equal quantity of ‘L’ and ‘R’ characters.<br><br>Given a balanced string s, split it in the maximum amount of balanced strings.<br><br>Return the maximum amount of split balanced strings.</strong></em></p><p>&nbsp;</p><p>Example 1:<br><br><code> Input: s = "RLRRLLRLRL" Output: 4 Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring contains same number of 'L' and 'R'.</code><br><br>Example 2:<br><br><code> Input: s = "RLLLLRRRLR" Output: 3 Explanation: s can be split into "RL", "LLLRRR", "LR", each substring contains same number of 'L' and 'R'.</code><br><br>Example 3:<br><code> Input: s = "LLLLRRRR" Output: 1</code><br><br>Explanation: s can be split into “LLLLRRRR”.<br>Example 4:<br><code> Input: s = "RLRRRLLRLL" Output: 2</code><br><br>Explanation: s can be split into “RL”, “RRRLLRLL”, since each substring contains an equal number of ‘L’ and ‘R’<br>&nbsp;</p><p>Constraints:<br><br><code>1 &lt;= s.length &lt;= 1000 s[i] is either 'L' or 'R'. s is a balanced string.</code><br><br>source：力扣（LeetCode）<br><a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings">problem link</a></p><h1 id="My-solution"><a href="#My-solution" class="headerlink" title=" My solution"></a> My solution</h1><p> <em>code</em><br><br> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">balancedStringSplit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>       rcnt<span class="token operator">=</span><span class="token number">0</span><span class="token comment"># Record the count of 'R' have meet.</span>       lcnt<span class="token operator">=</span><span class="token number">0</span><span class="token comment"># Record the count of 'L' have meet.</span>       ans<span class="token operator">=</span><span class="token number">0</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span><span class="token comment"># Ergodic per char in s</span>           <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">'R'</span><span class="token punctuation">:</span>rcnt<span class="token operator">+=</span><span class="token number">1</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>lcnt<span class="token operator">+=</span><span class="token number">1</span>           <span class="token keyword">if</span> lcnt<span class="token operator">==</span>rcnt<span class="token punctuation">:</span>ans<span class="token operator">+=</span><span class="token number">1</span><span class="token comment"># If after recorded this char the rcnt equle to lcnt, then mean a new split way found, answer plus 1</span>       <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br> <em>Ez poroblem. No explanation XD</em><p></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Minium path cost sum</title>
      <link href="/2021/09/06/Minium-path-cost-sum/"/>
      <url>/2021/09/06/Minium-path-cost-sum/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Problem describtion</strong></em><br><br><em>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</em></p><p>Note: You can only move either down or right at any point in time.</p><ol><li>Example 1:<br><br><code>  Input:  grid = [ [1,3,1],[1,5,1],[4,2,1]]  Output: 7</code><br><br>Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.<br></li><li>Example 2:<br><br><code>Input:  grid = [[1,2,3],[4,5,6]] Output: 12</code><br><br>Constraints:<br><br><code>m == grid.length n == grid[i].length 1 &lt;= m, n &lt;= 200 0 &lt;= grid[i][j] &lt;= 100</code><br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        m<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>                    ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>Source：力扣（LeetCode）<br><br><a href="https://leetcode-cn.com/problems/minimum-path-sum">Problem link</a><br><br> <strong>My solution</strong><br></p><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="  Explanation"></a>  Explanation</h1><ol><li>Gennerate a matrix with size m*n. This matirx will use to restore the minium cost to position (i,j)</li><li>Init matrix with border values.</li><li>Ergodic matrix and grid to caculate answer.</li><li>Return right down element of matrix(The answer).</li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Data struture </category>
          
          <category> Daily train </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Dynamic program </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use git</title>
      <link href="/2021/09/05/Howtousegit/"/>
      <url>/2021/09/05/Howtousegit/</url>
      
        <content type="html"><![CDATA[<p><em><strong>What is git?</strong></em><br><br>A powerful tool for version management. Extremely useful for team cooperate work.<br><br><em><strong>How to use git</strong></em></p><ol><li>Go to download git. Here is the link <a href="https://git-scm.com/">GIt</a>.</li><li>Select correct version for your platform.</li><li>Install it as you like.</li></ol><p><em><strong>Something you should to do after you installed git.</strong></em><br></p><ul><li>Generate a public key for SSH login in GitHub.<ol><li>Press Win+R open command runner. Just like this pic<br><br><img src="/2021/09/05/Howtousegit/commandrunner.jpg"></li><li>Input ‘cmd’ to run command Windows.<br><img src="/2021/09/05/Howtousegit/commandwindows.jpg"></li><li>Text next command.<br><code>ssh-keygen -t rsa -C "your_email@youremail.com"</code><br><br>   Replace <a href="mailto:your_email@youremail.com">your_email@youremail.com</a> with your email.<br>   <br>Press Enter when need you input.</li><li>View local SSH public key file on <code>C:\Users\your username\.ssh</code> folder.<img src="/2021/09/05/Howtousegit/id_rsa%20folder.jpg"></li><li>Open <code>id_rsa.pub</code> file as a notebook.</li><li>copy the content in <code>id_rsa.pub</code> to your GitHub account Setting page. Click there.<img src="/2021/09/05/Howtousegit/gitbub.jpg"></li><li>Click new SSH key, and name it as you like. Paste the content into the input-box. Confirm.</li></ol></li><li>Test whether it work.<ol><li>Repeat 1. and 2. steps.</li><li>Input <br> <code>ssh -T git@github.com</code></li><li>Check whether output contains words successful and your GitHub account name.</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Here is my first blog with Hexo</title>
      <link href="/2021/09/04/Here-is-my-first-blog-with-hexo/"/>
      <url>/2021/09/04/Here-is-my-first-blog-with-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="Celebration"><a href="#Celebration" class="headerlink" title="Celebration!"></a>Celebration!</h2><p><em>It’s excited that I established my own blog. But I have remember why I want to establish a personal blog. For me not forget the origin heart, I written them down!</em><br><br><em><strong>Why I established this website?</strong></em><br></p><ol><li>Record coding history, write the steps and methods.</li><li>Pratice written English for futrue plan.</li><li>Nourish a good habit for work.</li><li>Build a platform for my literary creation.</li></ol><p><em><strong>Thanking list</strong></em><br><br> <a href="https://hexo.io/zh-cn/">Hexo</a><br><br> <a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a><br><br> <strong>Some articles referred</strong><br></p><ul><li><a href="https://www.cnblogs.com/xingyunblog/p/8681205.html">https://www.cnblogs.com/xingyunblog/p/8681205.html</a></li><li><a href="https://blog.csdn.net/cungudafa/article/details/104281764">https://blog.csdn.net/cungudafa/article/details/104281764</a></li><li><a href="https://blog.csdn.net/qq_15015743/article/details/108856877">https://blog.csdn.net/qq_15015743/article/details/108856877</a></li></ul><p><em><strong>Thank for the help</strong></em></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
