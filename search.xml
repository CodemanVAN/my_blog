<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How to learn python effectively</title>
      <link href="/2021/09/22/A-novel-Crawler/"/>
      <url>/2021/09/22/A-novel-Crawler/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><em><strong>One of my friend started learn python, He asked me how to learn python quickly and effectively. I answered that just skip the traditional steps and concept such as basic grammar like for loop etc. Start with a specific project is the best way to learn python. And I recommend a video maker to him so that he to looking for a good project to follow. And he choosen a Novel Crawler project. I thought I have no new idea and project to busy on, so why don’t program one by myself. So I started this project and finished it in 4 hours recorded by wakatime</strong></em><br></p><h5 id="May-you’ll-ask-why-a-new-should-skip-the-traditional-step-and-start-with-a-project"><a href="#May-you’ll-ask-why-a-new-should-skip-the-traditional-step-and-start-with-a-project" class="headerlink" title="May you’ll ask why a new should skip the traditional step and start with a project"></a>May you’ll ask why a new should skip the traditional step and start with a project</h5><h6 id="Here-are-the-reasons"><a href="#Here-are-the-reasons" class="headerlink" title="Here are the reasons."></a>Here are the reasons.</h6><ul><li>you have learn C language or Java. You don’t have to learn the concept that same in any program language. If you learn it again. you will learn nothing but wasted your time. It’s such uneffective and boring.</li><li>Start a project you will come across bug, and try to solve it by yourself, the bug-solve ability is the most important skill for a coder, program language just a tool, you’re the man to use it, so you should write it with you mind. When it won’t work you should be able to find out why and fix it. That is the key point.</li><li>Once you finnaly make it work, you will be pround with yourself, you will have a motion that make you keep learning. The hardest part  is can’t get the reward in time when learning sometiong new, then you will lost your patientce and easily to give up.</li><li>A project contain the common knowledge that you often use and the whole project will cost a couple day to finish, you will automatically learn it when you typing keyboard.</li></ul><p><em>In the end, here is my novel Crawler <a href="https://github.com/CodemanVAN/novel-crawler">repository</a></em><br><br><strong>By the way, I still insist on my daily train but recent I think if I have know how to solve a problem then it’s unnecessary that post it in blog. So when I can figue out the daily problem, I will post it in my blog to remmber it. Not for being lazing.XD</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Longest Word in Dictionary through Deleting [Medium]</title>
      <link href="/2021/09/14/Longest-Word-in-Dictionary-through-Deleting-Medium/"/>
      <url>/2021/09/14/Longest-Word-in-Dictionary-through-Deleting-Medium/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Problem Describtion</strong></em><br><br><em>Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.</em><br><br>Example 1:<br><br><code> Input: s = "abpcplea", dictionary = ["ale","apple","monkey","plea"] Output: "apple"</code></p><p>Example 2:<br><br><code>Input: s = "abpcplea", dictionary = ["a","b","c"] Output: "a"</code></p><p><em>Constraints:</em></p><ul><li>1 &lt;= s.length &lt;= 1000</li><li>1 &lt;= dictionary.length &lt;= 1000</li><li>1 &lt;= dictionary[i].length &lt;= 1000</li><li>s and dictionary[i] consist of lowercase English letters.</li></ul><p>source：力扣（LeetCode）<br><br><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting">link</a><br></p><p><em><strong>My solution</strong></em><br><br>Code<br></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findLongestWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> dictionary<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">)</span>        dictionary<span class="token operator">=</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">judge</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># Check wheter this word can be reformed by string s.</span>            cnt<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> s1<span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">==</span>s2<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">:</span>                    cnt<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> cnt<span class="token operator">==</span><span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> idx            <span class="token keyword">if</span> cnt<span class="token operator">==</span><span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># If it can be reformed by s. return it's index </span>                <span class="token keyword">return</span> idx            <span class="token keyword">return</span> <span class="token boolean">None</span>        ans<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            idx<span class="token operator">=</span>judge<span class="token punctuation">(</span>s<span class="token punctuation">,</span>dictionary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> idx<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># Check whether this word length longger than old one.</span>                    ans<span class="token operator">=</span>dictionary<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h3><p> <em><strong>Easy problem, there are many methods to solve this problem. I just used the simplest one, simulation. But you can improve this method by using double pointer, it’s time complex is smaller than my code. And you can use DP,Dynamic programing to solve it. Creat a array dp with size [len(s)][26]. dp[i][j] mean the index of the first char j  after position i, then the solution come out.</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> Daily train </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Double pointer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Number of Boomerangs [Medium]</title>
      <link href="/2021/09/13/Number-of-Boomerangs-Medium/"/>
      <url>/2021/09/13/Number-of-Boomerangs-Medium/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Problem Describtion</strong></em><br><br>You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).<br><br>Return the number of boomerangs.<br></p><p>Example 1:<br><br><code> Input: points = [[0,0],[1,0],[2,0]] Output: 2</code><br><br>Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].<br><br>Example 2:<br><br><code> Input: points = [[1,1],[2,2],[3,3]] Output: 2</code><br><br>Example 3:<br><br><code> Input: points = [[1,1]] Output: 0</code><br></p><p>Constraints:</p><ul><li>n == points.length</li><li>1 &lt;= n &lt;= 500</li><li>points[i].length == 2</li><li>-104 &lt;= xi, yi &lt;= 104</li><li>All the points are unique.</li></ul><p><em><strong>My solution</strong></em><br><br><em>CODE</em></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numberOfBoomerangs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>        mp<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">!=</span>j<span class="token punctuation">:</span>                    d<span class="token operator">=</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>                    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">in</span> mp<span class="token punctuation">:</span>                        <span class="token keyword">if</span> i <span class="token keyword">in</span> mp<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>mp<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>mp<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>                        <span class="token keyword">if</span> j <span class="token keyword">in</span> mp<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>mp<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>mp<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>mp<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">!=</span>j<span class="token punctuation">:</span>                    d<span class="token operator">=</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>                    ans<span class="token operator">+=</span>mp<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span>  ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>Explanation===*This is a solution. I made the problem more complexer. Just ergodic the pointer list and record the distance to each pointer and conut it in the end of per cycle.*<br><p><em><strong>Offical code</strong></em><br></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numberOfBoomerangs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> points<span class="token punctuation">:</span>            cnt <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> q <span class="token keyword">in</span> points<span class="token punctuation">:</span>                dis <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                cnt<span class="token punctuation">[</span>dis<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> cnt<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                ans <span class="token operator">+=</span> m <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Author：LeetCode-Solution<br><br>link：<a href="https://leetcode-cn.com/problems/number-of-boomerangs/solution/hui-xuan-biao-de-shu-liang-by-leetcode-s-lft5/">https://leetcode-cn.com/problems/number-of-boomerangs/solution/hui-xuan-biao-de-shu-liang-by-leetcode-s-lft5/</a><br><br>source：力扣（LeetCode）<br></p><p><em><strong>I’m sorry for the absence in last three days,I participated the 2021CUMCM(China Undergraduate Mathematical Contest in Modeling) contest, so I can’t take time to continue my daily train and blog writting. But I learn a lot from this content and have a good mermory with my teammates. I will keep going with my plan now.</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> Daily train </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Hashmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Text Justification [hard]</title>
      <link href="/2021/09/09/Text-Justification-hard/"/>
      <url>/2021/09/09/Text-Justification-hard/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Problem describtion</strong></em><br><br>Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.《Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.<br><br>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ‘ ‘ when necessary so that each line has exactly maxWidth characters.<br><br>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.<br><br>For the last line of text, it should be left-justified and no extra space is inserted between words.<br><br>Note:<br><br>A word is defined as a character sequence consisting of non-space characters only.<br><br>Each word’s length is guaranteed to be greater than 0 and not exceed maxWidth.<br><br>The input array words contains at least one word.<br><br>Example 1:<br><code> Input: words = ["This", "is", "an", "example", "of", "text", "justification."], maxWidth = 16 Output: [ &nbsp; &nbsp;"This &nbsp; &nbsp;is &nbsp; &nbsp;an", &nbsp; &nbsp;"example &nbsp;of text", &nbsp; &nbsp;"justification. &nbsp;" ]</code><br><br>Example 2:<br><br><code> Input: words = ["What","must","be","acknowledgment","shall","be"], maxWidth = 16 Output: [ &nbsp; "What &nbsp; must &nbsp; be", &nbsp; "acknowledgment &nbsp;", &nbsp; "shall be &nbsp; &nbsp; &nbsp; &nbsp;" ]</code><br><br>Explanation: Note that the last line is “shall be    “ instead of “shall     be”, because the last line must be left-justified instead of fully-justified.<br><br>Note that the second line is also left-justified becase it contains only one word.<br><br>Example 3:<br><br><code> Input: words = ["Science","is","what","we","understand","well","enough","to","explain","to","a","computer.","Art","is","everything","else","we","do"], maxWidth = 20 Output: [ &nbsp; "Science &nbsp;is &nbsp;what we",   "understand &nbsp; &nbsp; &nbsp;well", &nbsp; "enough to explain to", &nbsp; "a &nbsp;computer. &nbsp;Art is", &nbsp; "everything &nbsp;else &nbsp;we", &nbsp; "do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;" ]</code><br></p><p>Constraints:<br></p><ul><li>1 &lt;= words.length &lt;= 300</li><li>1 &lt;= words[i].length &lt;= 20</li><li>words[i] consists of only English letters and symbols.</li><li>1 &lt;= maxWidth &lt;= 100</li><li>words[i].length &lt;= maxWidth</li></ul><p>source：力扣（LeetCode）<br><br><a href="https://leetcode-cn.com/problems/text-justification">problem link</a><br></p><p><em><strong>My solution</strong></em><br><br> <em>Here is the code</em><br> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">fullJustify</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> words<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxWidth<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>       n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>       res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>       cnt<span class="token operator">=</span><span class="token number">0</span>       wd<span class="token operator">=</span><span class="token number">0</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token keyword">if</span> cnt<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>wd<span class="token operator">&lt;=</span>maxWidth<span class="token punctuation">:</span>               res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>               cnt<span class="token operator">+=</span><span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>               wd<span class="token operator">+=</span><span class="token number">1</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>               string<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>               <span class="token keyword">if</span> wd<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span>                   string<span class="token operator">=</span>string<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxWidth<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token punctuation">(</span>wd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token keyword">else</span><span class="token punctuation">:</span>                   string<span class="token operator">+=</span><span class="token string">' '</span><span class="token operator">*</span><span class="token punctuation">(</span>maxWidth<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token keyword">if</span> maxWidth<span class="token operator">%</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                   string<span class="token operator">=</span>string<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxWidth<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token punctuation">(</span>wd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxWidth<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token punctuation">(</span>wd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>maxWidth<span class="token operator">%</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>               ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>string<span class="token punctuation">)</span>               res<span class="token operator">=</span><span class="token punctuation">[</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>               wd<span class="token operator">=</span><span class="token number">1</span>               cnt<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>       string<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>       string<span class="token operator">+=</span><span class="token string">' '</span><span class="token operator">*</span><span class="token punctuation">(</span>maxWidth<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>       ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>string<span class="token punctuation">)</span>       <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br> <br><br> Explanation<br> ===<br><em>Another hard problem, same greedy strategy.</em><p></p><ol><li>We can add word to current result list if sum(len(res[i])) plus current word’s length &lt; maxWidth. <b> But we should remember if word count bigger than 1 we should plus one space(‘ ‘) in string.</b></li><li>If we can’t add current word into our result list, we should progess current string to satisfy len(string）==maxWidth.<ol><li>Generate a base string like “one tow three”</li><li>Replace single space by  ‘ ‘* max fator of need space divide to word count </li><li>Progess remainder. Make it evenly insert to the gap of words.</li></ol></li><li>Progess the tail. </li><li>Return answer.</li></ol><p><strong>Actually, I passed it by one try! :)</strong></p>]]></content>
      
      
      <categories>
          
          <category> Daily train </category>
          
          <category> Algortihm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Greedy strategy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPO</title>
      <link href="/2021/09/08/IPO/"/>
      <url>/2021/09/08/IPO/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Problem describtion</strong></em><br><br>*Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.<br>*<br><br>You are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.<br><br><br>Initially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.<br></p><p>Pick a list of at most k distinct projects from given projects to<b> maximize</b> your final capital, and return the final maximized capital.<br><br><br>The answer is guaranteed to fit in a 32-bit signed integer.<br><br>&nbsp;</p><p>Example 1:<br><br><code> Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1] Output: 4</code><br><br>Explanation: <br><br><code>Since your initial capital is 0, you can only start the project indexed 0. After finishing it you will obtain profit 1 and your capital becomes 1. With capital 1, you can either start the project indexed 1 or the project indexed 2. Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital. Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.</code><br><br>Example 2:<br><br><code> Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2] Output: 6</code>&nbsp;</p><p><em>Constraints:</em><br></p><ul><li>1 &lt;= k &lt;= 105<br></li><li>0 &lt;= w &lt;= 109</li><li>n == profits.length</li><li>n == capital.length</li><li>1 &lt;= n &lt;= 105</li><li>0 &lt;= profits[i] &lt;= 104</li><li>0 &lt;= capital[i] &lt;= 109</li></ul><p>source：力扣（LeetCode）<br><br><a href="https://leetcode-cn.com/problems/ipo">problem link</a></p><p><em><strong>My solution</strong></em><br><br>Here is my code<br></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMaximizedCapital</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> w<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> profits<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> capital<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        projects<span class="token operator">=</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>profits<span class="token punctuation">,</span>capital<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Set a mapping between profits and capital. And sorted it by profits</span>        remained<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># If current w is not enought for some projects, we will add it to this list</span>        cnt<span class="token operator">=</span><span class="token number">0</span><span class="token comment"># Record how many projects we selected</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>projects<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''A flag to detect whether no more project to take/can afford any project in remained list.         The method is if last remained length equle current remained length, it's implication is no project is selected in last ergodication.         Time to break ergodication and return answer.'''</span>        <span class="token keyword">while</span> k<span class="token operator">&gt;</span>cnt <span class="token keyword">and</span> projects<span class="token punctuation">:</span>            p<span class="token operator">=</span>projects<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Pick the max profit project.</span>            <span class="token keyword">if</span> w<span class="token operator">&gt;=</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment"># Check whether we can afford it.</span>                w<span class="token operator">+=</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># Yes we can. Time to puls the profit and remove it from project pool.</span>                cnt<span class="token operator">+=</span><span class="token number">1</span>                projects<span class="token operator">+=</span>remained<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># Concat the tow list. Do it agian.</span>                remained<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># Clear remained list</span>                n<span class="token operator">=</span><span class="token number">0</span><span class="token comment"># Reinit n.</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                remained<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment"># OH No, we can't afford this project, but maybe we can afford it latter, so let's add it to the remained list.</span>        <span class="token keyword">return</span> w<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><ul><li><p><em>This’s a hard problem in leetcode, but it’s easy to figure it out that we can use greedy strategy. It’s can be proved that we always select the project with the max profit in remained list can get the max captial.</em></p></li><li><p>So we can reorder the list so that we can select project with max profit. Zip funtion can map the tow values to a tuple.</p></li><li><p>Just ergodic the list and find out answer.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Daily train </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Greedy strategy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Balanced string split</title>
      <link href="/2021/09/07/Balanced-string-split/"/>
      <url>/2021/09/07/Balanced-string-split/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-Desribtion"><a href="#Problem-Desribtion" class="headerlink" title="Problem Desribtion"></a>Problem Desribtion<br></h1><p><em><strong>Balanced strings are those that have an equal quantity of ‘L’ and ‘R’ characters.<br><br>Given a balanced string s, split it in the maximum amount of balanced strings.<br><br>Return the maximum amount of split balanced strings.</strong></em></p><p>&nbsp;</p><p>Example 1:<br><br><code> Input: s = "RLRRLLRLRL" Output: 4 Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring contains same number of 'L' and 'R'.</code><br><br>Example 2:<br><br><code> Input: s = "RLLLLRRRLR" Output: 3 Explanation: s can be split into "RL", "LLLRRR", "LR", each substring contains same number of 'L' and 'R'.</code><br><br>Example 3:<br><code> Input: s = "LLLLRRRR" Output: 1</code><br><br>Explanation: s can be split into “LLLLRRRR”.<br>Example 4:<br><code> Input: s = "RLRRRLLRLL" Output: 2</code><br><br>Explanation: s can be split into “RL”, “RRRLLRLL”, since each substring contains an equal number of ‘L’ and ‘R’<br>&nbsp;</p><p>Constraints:<br><br><code>1 &lt;= s.length &lt;= 1000 s[i] is either 'L' or 'R'. s is a balanced string.</code><br><br>source：力扣（LeetCode）<br><a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings">problem link</a></p><h1 id="My-solution"><a href="#My-solution" class="headerlink" title=" My solution"></a> My solution</h1><p> <em>code</em><br><br> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">balancedStringSplit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>       rcnt<span class="token operator">=</span><span class="token number">0</span><span class="token comment"># Record the count of 'R' have meet.</span>       lcnt<span class="token operator">=</span><span class="token number">0</span><span class="token comment"># Record the count of 'L' have meet.</span>       ans<span class="token operator">=</span><span class="token number">0</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span><span class="token comment"># Ergodic per char in s</span>           <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">'R'</span><span class="token punctuation">:</span>rcnt<span class="token operator">+=</span><span class="token number">1</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>lcnt<span class="token operator">+=</span><span class="token number">1</span>           <span class="token keyword">if</span> lcnt<span class="token operator">==</span>rcnt<span class="token punctuation">:</span>ans<span class="token operator">+=</span><span class="token number">1</span><span class="token comment"># If after recorded this char the rcnt equle to lcnt, then mean a new split way found, answer plus 1</span>       <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br> <em>Ez poroblem. No explanation XD</em><p></p>]]></content>
      
      
      <categories>
          
          <category> Daily train </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minium path cost sum</title>
      <link href="/2021/09/06/Minium-path-cost-sum/"/>
      <url>/2021/09/06/Minium-path-cost-sum/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Problem describtion</strong></em><br><br><em>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</em></p><p>Note: You can only move either down or right at any point in time.</p><ol><li>Example 1:<br><br><code>  Input:  grid = [ [1,3,1],[1,5,1],[4,2,1]]  Output: 7</code><br><br>Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.<br></li><li>Example 2:<br><br><code>Input:  grid = [[1,2,3],[4,5,6]] Output: 12</code><br><br>Constraints:<br><br><code>m == grid.length n == grid[i].length 1 &lt;= m, n &lt;= 200 0 &lt;= grid[i][j] &lt;= 100</code><br></li></ol><p>Source：力扣（LeetCode）<br><br><a href="https://leetcode-cn.com/problems/minimum-path-sum">Problem link</a><br><br> <strong>My solution</strong><br></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        m<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>                    ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="  Explanation"></a>  Explanation</h1><ol><li>Gennerate a matrix with size m*n. This matirx will use to restore the minium cost to position (i,j)</li><li>Init matrix with border values.</li><li>Ergodic matrix and grid to caculate answer.</li><li>Return right down element of matrix(The answer).</li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Data struture </category>
          
          <category> Daily train </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> DP </tag>
            
            <tag> Dynamic program </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use git</title>
      <link href="/2021/09/05/Howtousegit/"/>
      <url>/2021/09/05/Howtousegit/</url>
      
        <content type="html"><![CDATA[<p><em><strong>What is git?</strong></em><br><br>A powerful tool for version management. Extremely useful for team cooperate work.<br><br><em><strong>How to use git</strong></em></p><ol><li>Go to download git. Here is the link <a href="https://git-scm.com/">GIt</a>.</li><li>Select correct version for your platform.</li><li>Install it as you like.</li></ol><p><em><strong>Something you should to do after you installed git.</strong></em><br></p><ul><li>Generate a public key for SSH login in GitHub.<ol><li>Press Win+R open command runner. Just like this pic<br><br><img src="/2021/09/05/Howtousegit/commandrunner.jpg"></li><li>Input ‘cmd’ to run command Windows.<br><img src="/2021/09/05/Howtousegit/commandwindows.jpg"></li><li>Text next command.<br><code>ssh-keygen -t rsa -C "your_email@youremail.com"</code><br><br>   Replace <a href="mailto:your_email@youremail.com">your_email@youremail.com</a> with your email.<br>   <br>Press Enter when need you input.</li><li>View local SSH public key file on <code>C:\Users\your username\.ssh</code> folder.<img src="/2021/09/05/Howtousegit/id_rsa%20folder.jpg"></li><li>Open <code>id_rsa.pub</code> file as a notebook.</li><li>copy the content in <code>id_rsa.pub</code> to your GitHub account Setting page. Click there.<img src="/2021/09/05/Howtousegit/gitbub.jpg"></li><li>Click new SSH key, and name it as you like. Paste the content into the input-box. Confirm.</li></ol></li><li>Test whether it work.<ol><li>Repeat 1. and 2. steps.</li><li>Input <br> <code>ssh -T git@github.com</code></li><li>Check whether output contains words successful and your GitHub account name.</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Here is my first blog with Hexo</title>
      <link href="/2021/09/04/Here-is-my-first-blog-with-hexo/"/>
      <url>/2021/09/04/Here-is-my-first-blog-with-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="Celebration"><a href="#Celebration" class="headerlink" title="Celebration!"></a>Celebration!</h2><p><em>It’s excited that I established my own blog. But I have remember why I want to establish a personal blog. For me not forget the origin heart, I written them down!</em><br><br><em><strong>Why I established this website?</strong></em><br></p><ol><li>Record coding history, write the steps and methods.</li><li>Pratice written English for futrue plan.</li><li>Nourish a good habit for work.</li><li>Build a platform for my literary creation.</li></ol><p><em><strong>Thanking list</strong></em><br><br> <a href="https://hexo.io/zh-cn/">Hexo</a><br><br> <a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a><br><br> <strong>Some articles referred</strong><br></p><ul><li><a href="https://www.cnblogs.com/xingyunblog/p/8681205.html">https://www.cnblogs.com/xingyunblog/p/8681205.html</a></li><li><a href="https://blog.csdn.net/cungudafa/article/details/104281764">https://blog.csdn.net/cungudafa/article/details/104281764</a></li><li><a href="https://blog.csdn.net/qq_15015743/article/details/108856877">https://blog.csdn.net/qq_15015743/article/details/108856877</a></li></ul><p><em><strong>Thank for the help</strong></em></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
